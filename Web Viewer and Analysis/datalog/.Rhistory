d$latitude <- as.integer(d$latitude)
d$longitude <- as.integer(d$longitude)
head(d)
d <- dSimpleLocationProbe
d <- dSimpleLocationProbe
d$latitude <- as.numeric(d$latitude)
d$longitude <- as.numeric(d$longitude)
head(d)
d <- dSimpleLocationProbe
head(d)
d <- dSimpleLocationProbe
d$latitude <- as.numeric(d$latitude)
d$longitude <- as.numeric(d$longitude)
head(d)
d$latitude <- apply(as.numeric(d$latitude))
d$latitude <- apply(d$latitude,as.numeric(d$latitude))
d <- dSimpleLocationProbe
head(d)
d$latitude
d$latitude <- as.numeric(as.character(dSimpleLocationProbe$latitude))
d$latitude
d$longitude <- as.numeric(as.character(dSimpleLocationProbe$longitude))
head(d)
class(d)
class(d$latitude)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="stamen",
maptype="toner", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="stamen",
maptype="roadmap", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="google",
maptype="roadmap", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="google",
maptype="satellite", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="google",
maptype="hybrid", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="google",
maptype="terrain", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
myMap <- get_map(location=colMeans(d[, c('longitude', 'latitude')]), source="google",
maptype="roadmap", crop=FALSE, zoom=16)
ggmap(myMap) + geom_point(aes(x = longitude, y = latitude), data=d)
get_googlemap(urlonly = TRUE)
# get_googlemap has several argument checks
get_googlemap(zoom = 13.5)
get_googlemap(scale = 3)
get_googlemap(center = c(-30,-110))
# markers and paths are easy to access
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, path = df,, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = 'black') +
geom_path(aes(x = lon, y = lat), data = df)
gc <- geocode('waco, texas')
center <- as.numeric(gc)
ggmap(get_googlemap(center = center, color = 'bw', scale = 2), fullpage = T)
# the scale argument can be seen in the following
# (make your graphics device as large as possible)
ggmap(get_googlemap(center, scale = 1), fullpage = TRUE) # pixelated
ggmap(get_googlemap(center, scale = 2), fullpage = TRUE) # fine
get_googlemap(urlonly = TRUE)
# get_googlemap has several argument checks
get_googlemap(zoom = 13.5)
get_googlemap(scale = 3)
get_googlemap(center = c(-30,-110))
# markers and paths are easy to access
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, path = df,, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = 'black') +
geom_path(aes(x = lon, y = lat), data = df)
df
d
d <- dSimpleLocationProbe
head(d)
class(d$latitude)
d$latitude <- as.numeric(as.character(dSimpleLocationProbe$latitude))
d$longitude <- as.numeric(as.character(dSimpleLocationProbe$longitude))
head(d)
map <- get_googlemap(markers = d, path = d,, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = longitude, y = latitude), data = d, size = 3, colour = 'black') +
geom_path(aes(x = longitude, y = latitude), data = d)
d
d <- dSimpleLocationProbe
head(d)
class(d$latitude)
d$latitude <- as.numeric(as.character(dSimpleLocationProbe$latitude))
d$longitude <- as.numeric(as.character(dSimpleLocationProbe$longitude))
d
get_googlemap(urlonly = TRUE)
# get_googlemap has several argument checks
get_googlemap(zoom = 13.5)
get_googlemap(scale = 3)
get_googlemap(center = c(-30,-110))
map <- get_googlemap(markers = d, path = d,, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = longitude, y = latitude), data = d, size = 3, colour = 'black') +
geom_path(aes(x = longitude, y = latitude), data = d)
require(graphics)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- c(2,2:4,4,4,5,5,7,7,7)
y <- c(1:6, 5:4, 3:1)
approx(x, y, xout = x)$y # warning
(ay <- approx(x, y, xout = x, ties = "ordered")$y)
stopifnot(ay == c(2,2,3,6,6,6,4,4,1,1,1))
approx(x, y, xout = x, ties = min)$y
approx(x, y, xout = x, ties = max)$y
y
?par
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:20
y <- rnorm(20)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
?approxfun
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
?col
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 3, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
?points
?mfrow
x <- 1:10
y <- rnorm(10)
par(row = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
par(row = c(2,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
par(row = c(4,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
par(row = c(4,1))
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
?approx
x
y
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
curve
?cirve
?curve
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
?approxfun
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "linear")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "linear")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
?approxfun
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approx(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approx(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
f <- approx(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approx(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approxfun(x, y), col = 2, pch = "*")
points(approxfun(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approxfun(x, y), col = 2, pch = "*")
points(approxfun(x, y, method = "constant"), col = 4, pch = "*")
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approx(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approx(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- 1:10
y <- rnorm(10)
plot(x, y, main = "Liniear Interpolation example")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
?approxfun
filters <- wavDaubechies("s8", normalize=TRUE)
## plot the impulse responses
plot(filters, type="time")
## plot the gain function
plot(filters, type="gain")
install.packages("wmtsa")
library(wmtsa)
filters <- wavDaubechies("s8", normalize=TRUE)
## plot the impulse responses
plot(filters, type="time")
## plot the gain function
plot(filters, type="gain")
filters <- wavDaubechies("s8", normalize=TRUE)
## plot the impulse responses
plot(filters, type="time")
filters <- wavDaubechies("s8", normalize=TRUE)
filters
plot(filters, type="time")
plot(filters, type="gain")
plot(filters, type="time")
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
## A cosine is for template; sin and cos are offset by 25 samples
template<-cos(idx)
## Find the best match with the canonical recursion formula
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
## Display the warping curve, i.e. the alignment curve
plot(alignment,type="threeway")
## Align and plot with the Rabiner-Juang type VI-c unsmoothed recursion
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
## See the recursion relation, as a figure and text
plot(rabinerJuangStepPattern(6,"c"))
rabinerJuangStepPattern(6,"c")
shinyapps::setAccountInfo(
name="netsys",
token="353A4F40A88D2A3E7AD9E28CF5843C13",
secret="JUs08Ds0fqBnC94DTgm2rVtNoPNwvQvDTVTBEjpP")
setwd('D:/ITRC/personaldata')
library(shinyapps)
deployApp()
